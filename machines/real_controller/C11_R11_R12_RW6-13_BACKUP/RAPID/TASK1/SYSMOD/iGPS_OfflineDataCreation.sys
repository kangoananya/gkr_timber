MODULE iGPS_OfflineDataCreation(SYSMODULE, NOSTEPIN)
    LOCAL CONST num kNumDecPos := 3;
    LOCAL CONST num kNumDecOrient := 6;
    LOCAL VAR MSG_RFL_FRAME_REQUEST rfl_frame_request_msg;
    LOCAL VAR MSG_RFL_FRAME_FEEDBACK rfl_frame_feedback_msg;
    LOCAL VAR rawbytes od_raw_message_recv;
    LOCAL VAR rawbytes od_raw_message_sent;
    LOCAL VAR num od_msg_type_rcv;
    
    PROC GetAndCreateOfflineData(string robot_name, VAR socketdev socket, VAR string error_msg)
        VAR iodev offline_data_file; 
        VAR bool finished;
        VAR num index;
        VAR tooldata tool;
        VAR wobjdata wobj;
        VAR string folder_name;
        VAR string file_name;
        error_msg := "Success";
        
        folder_name := "Home:/iGPS/";
        file_name := "iGPS_OfflineData_" + robot_name + ".sys";
        
        MakeDir folder_name;        
        Open folder_name + file_name, offline_data_file \Write;
        
        Write offline_data_file, "MODULE iGPS_OfflineData(SYSMODULE, NOSTEPIN)";   
        Write offline_data_file, "\09! Autogenerated module which contains the iGPS Offline Data.";        
        Write offline_data_file, "";
        
        Write offline_data_file, "\09! iGPS Tools (Note: loaddata not stored!)";  
        
        ! Get tools
        finished := FALSE;
        index := 0; ! Index 0: igps_tool0, custom tools starting from index 1
        WHILE (NOT finished) AND (error_msg = "Success") DO
            GetTool index, socket, finished, error_msg, tool;
            IF NOT finished THEN
                AddToolToFile rfl_frame_feedback_msg.frame_name, tool, offline_data_file;
            ENDIF
            index := index + 1;
        ENDWHILE        
        
        Write offline_data_file, "";        
        Write offline_data_file, "\09! iGPS Workobjects";   
        
        ! Get wobjs 
        finished := FALSE;
        index := 0; ! Index 0: igps_wobj0, custom wobjs starting from index 1
        WHILE (NOT finished) AND (error_msg = "Success") DO
            GetWobj index, socket, finished, error_msg, wobj;
            IF NOT finished THEN
                AddWobjToFile rfl_frame_feedback_msg.frame_name, wobj, offline_data_file;
            ENDIF
            index := index + 1;
        ENDWHILE

        Write offline_data_file, "";
        
        Write offline_data_file, "ENDMODULE";
        
        Close offline_data_file;
        
        IF error_msg = "Success" THEN
            LoadiGPSOfflineData folder_name + file_name;
        ENDIF
    ERROR
        RAISE;
    ENDPROC
    
    LOCAL PROC GetTool(num index, VAR socketdev socket, VAR bool finished, VAR string error_msg, VAR tooldata tool)
        GetFrame 0, index, socket, finished, error_msg;
        
        tool := tool0;
        tool.tframe := rfl_frame_feedback_msg.frame_pose;
    ERROR
        RAISE;
    ENDPROC
    
    LOCAL PROC GetWobj(num index, VAR socketdev socket, VAR bool finished, VAR string error_msg, VAR wobjdata wobj)
        GetFrame 1, index, socket, finished, error_msg;
        
        wobj := wobj0;
        wobj.uframe := rfl_frame_feedback_msg.frame_pose;
    ERROR
        RAISE;
    ENDPROC
    
    LOCAL PROC GetFrame(num type, num index, VAR socketdev socket, VAR bool finished, VAR string error_msg)
        ! Create and send frame request to static correction server
        SendFrameRequest type, index, socket;
        
        ! Wait for robot command message from static correction server
        WaitForFrameFeedback socket, error_msg;
        
        IF (rfl_frame_feedback_msg.frame_exists = 0) OR (NOT error_msg = "Success") THEN
            finished := TRUE;
        ENDIF   
    ERROR
        RAISE;         
    ENDPROC
    
    LOCAL PROC SendFrameRequest(num type, num index, VAR socketdev socket)
        rfl_frame_request_msg.frame_type := type;
        rfl_frame_request_msg.frame_index := index;
        PackMSGRFLFrameRequest rfl_frame_request_msg, od_raw_message_sent;
        SendMessage socket, od_raw_message_sent;
    ERROR
        RAISE;
    ENDPROC
    
    LOCAL PROC WaitForFrameFeedback(VAR socketdev socket, VAR string error_msg)
        ReceiveMessage socket, od_msg_type_rcv, od_raw_message_recv;
        
        IF (od_msg_type_rcv = 9) THEN
            ! Unpack message 
            UnpackMSGRFLFrameFeedback od_raw_message_recv, rfl_frame_feedback_msg;
            error_msg := rfl_frame_feedback_msg.corr_error_msg;
        ELSE
            error_msg := "ReceivedWrongMessageType";
        ENDIF
    ERROR
        RAISE;
    ENDPROC
    
    LOCAL PROC AddToolToFile(string tool_name, tooldata tool_data, VAR iodev file)
        Write file, "\09" \NoNewLine;
        Write file, "TASK PERS tooldata " + tool_name + " := [" \Bool:=tool_data.robhold \NoNewLine;
        Write file, ", [" + PosToStr(tool_data.tframe.trans, kNumDecPos) \NoNewLine;
        Write file, ", " + OrientToStr(tool_data.tframe.rot, kNumDecOrient) \NoNewLine;
        Write file, "], [" + NumToStr(tool_data.tload.mass, kNumDecPos) \NoNewLine;
        Write file, ", " + PosToStr(tool_data.tload.cog, kNumDecPos) \NoNewLine;
        Write file, ", " + OrientToStr(tool_data.tload.aom, kNumDecOrient) \NoNewLine;
        Write file, ", " + NumToStr(tool_data.tload.ix, kNumDecPos) \NoNewLine;
        Write file, ", " + NumToStr(tool_data.tload.iy, kNumDecPos) \NoNewLine;
        Write file, ", " + NumToStr(tool_data.tload.iz, kNumDecPos) \NoNewLine;        
        Write file, "]];";
    ENDPROC

    LOCAL PROC AddWobjToFile(string wobj_name, wobjdata wobj_data, VAR iodev file)
        Write file, "\09" \NoNewLine;
        Write file, "TASK PERS wobjdata " + wobj_name + " := [" \Bool:=wobj_data.robhold \NoNewLine;
        Write file, ", " \Bool:=wobj_data.ufprog \NoNewLine;
        Write file, ", """ + wobj_data.ufmec + """" \NoNewLine;
        Write file, ", [" + PosToStr(wobj_data.uframe.trans, kNumDecPos) \NoNewLine;
        Write file, ", " + OrientToStr(wobj_data.uframe.rot, kNumDecOrient) \NoNewLine;
        Write file, "], [" + PosToStr(wobj_data.oframe.trans, kNumDecPos) \NoNewLine;
        Write file, ", " + OrientToStr(wobj_data.oframe.rot, kNumDecOrient) \NoNewLine;       
        Write file, "]];";
    ENDPROC
    
    LOCAL PROC LoadiGPSOfflineData(string file_path)
        Load file_path;
    ERROR
        IF ERRNO = ERR_LOADED THEN
            Unload file_path;
            RETRY;
        ENDIF
    ENDPROC
            
ENDMODULE